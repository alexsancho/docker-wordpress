#!/usr/bin/with-contenv bash
##
# This script uses clever heredoc hack to substitute env variables into static config files
# Source: http://stackoverflow.com/questions/2914220/bash-templating-how-to-build-configuration-files-from-templates-with-bash
##

##
# Replaces ${ENV} placoholders from file with provided variables
# $1 - ':'' separated list of variables
# $2 - filename to render
##
function render_env_tmpl() {
    vars=$1
    input_file=$2
    # If filename ends with .tmpl replace it without the .tmpl
    filename=$(dirname $input_file)/$(basename $input_file .tmpl)

    tmp_file=/tmp/$(basename $filename)

    # render all provided $vars to temporary file
    envsubst "$vars" < $input_file > $tmp_file

    # replace original file with rendered file
    mv $tmp_file $filename
}

echo "[cont-init.d] Substituting env into configuration files..."

##
# Nginx doesn't support env variables in config files so we will have to do this in hacky way instead
##
VARS='$PORT:$WEB_ROOT:$WEB_USER:$WEB_GROUP:$NGINX_ACCESS_LOG:$NGINX_ERROR_LOG:$NGINX_ERROR_LEVEL:$NGINX_INCLUDE_DIR:$NGINX_MAX_BODY_SIZE:$NGINX_FASTCGI_TIMEOUT:$WP_ENV:$NGINX_CACHE_KEY'
render_env_tmpl "$VARS" /etc/nginx/nginx.conf

##
# Render all user provided nginx templates
##
VARS+='$BASIC_AUTH_USER:$BASIC_AUTH_PASSWORD_HASH'
for conf_file in $(find $NGINX_INCLUDE_DIR -type f  -name '*.tmpl'); do
    echo "[cont-init.d] Rendering env in $conf_file..."

    # Add helper variables for easier scripting
    export __DIR__=$(dirname $conf_file)

    VARS_TMPL=$VARS':$__DIR__'
    render_env_tmpl "$VARS_TMPL" $conf_file
done
